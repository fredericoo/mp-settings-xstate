{
  "components": {
    "responses": {},
    "schemas": {
      "NotFound": {
        "description": "A referred object was not found",
        "example": {
          "code": "PERSON_NOT_FOUND",
          "description": "The person with the referred id cannot be found"
        },
        "properties": {
          "code": {
            "description": "The specific error code. Follows the format <specific error>",
            "type": "string"
          },
          "description": {
            "description": "Technical description in English",
            "type": "string"
          },
          "errors": {
            "description": "The actual errors, in nested format",
            "type": "object"
          }
        },
        "required": ["code", "description"],
        "title": "NotFound",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.ErrorSchemas.NotFound"
      },
      "Company": {
        "description": "Company",
        "properties": {
          "authorizer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ],
            "nullable": true,
            "readOnly": true,
            "type": "object"
          },
          "authorizer_id": {
            "example": "4b8fc17c-89e7-43b8-8f19-be6c329e1c5f",
            "format": "uuid",
            "nullable": false,
            "type": "string",
            "writeOnly": true
          },
          "billing_email": {
            "description": "Billing E-mail",
            "example": "company@saltpay.co",
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "charging_bank_account": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ChargingBankAccount"
              }
            ],
            "nullable": true,
            "type": "object"
          },
          "id": {
            "description": "Company ID",
            "example": "78868a92-553e-470d-9ae5-bc30a6655109",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "inserted_at": {
            "description": "Datetime of creation (ISO 8601)",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "legal_structure": {
            "description": "How a company is organised, in regard to its legal status",
            "enum": ["LIMITED", "SOLE_TRADER"],
            "example": "LIMITED",
            "nullable": true,
            "type": "string"
          },
          "organisation_id": {
            "description": "Organisation ID that the Company belongs to",
            "example": "78868a92-553e-470d-9ae5-bc30a6655129",
            "format": "uuid",
            "readOnly": false,
            "type": "string"
          },
          "people_roles": {
            "items": {
              "$ref": "#/components/schemas/PersonRole"
            },
            "type": "array"
          },
          "registered_address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Legal business registered address",
            "nullable": true,
            "type": "object"
          },
          "registered_name": {
            "description": "Registration business name",
            "example": "Company Name",
            "type": "string"
          },
          "registered_number": {
            "description": "Registration business number. Must be unique per country",
            "example": "123456789",
            "nullable": true,
            "type": "string"
          },
          "shareholders": {
            "deprecated": true,
            "items": {
              "$ref": "#/components/schemas/PersonRole"
            },
            "type": "array"
          },
          "store_count": {
            "description": "Number of registered stores",
            "example": 3,
            "nullable": true,
            "readOnly": true,
            "type": "integer"
          },
          "updated_at": {
            "description": "Datetime of last update (ISO 8601)",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "vat_number": {
            "description": "Value Added Tax (VAT)",
            "example": "IS123456",
            "nullable": true,
            "type": "string"
          }
        },
        "title": "Company",
        "type": "object"
      },
      "PersonResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          }
        ],
        "description": "Person Response",
        "title": "PersonResponse",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.PeopleResponses.PersonResponse"
      },
      "Person": {
        "description": "The Person data",
        "properties": {
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "nullable": true,
            "type": "object"
          },
          "birth_date": {
            "description": "Person's birth date following the `yyyy-MM-dd` format (Date, ISO 8601)",
            "example": "1991-09-24",
            "format": "date",
            "nullable": true,
            "type": "string"
          },
          "companies_roles": {
            "deprecated": true,
            "description": "Companies where the person has a role",
            "items": {
              "properties": {
                "company_id": {
                  "description": "Company UUID",
                  "example": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
                  "format": "uuid",
                  "readOnly": true,
                  "type": "string"
                },
                "roles": {
                  "enum": ["UBO", "DIRECTOR"],
                  "type": "string"
                }
              },
              "type": "object"
            },
            "readOnly": true,
            "type": "array"
          },
          "country": {
            "description": "Country code (ISO 3166-1 alpha-2) of the person's national id issuer. (country cannot be null if national_id_number is presented)",
            "example": "PT",
            "maxLength": 2,
            "minLength": 2,
            "nullable": true,
            "type": "string"
          },
          "documents": {
            "description": "Person Documents",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "nullable": true,
            "readOnly": true,
            "type": "array"
          },
          "email": {
            "description": "Email address",
            "example": "firstlast@email.com",
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "first_name": {
            "description": "First Name",
            "example": "First",
            "type": "string"
          },
          "id": {
            "description": "Person UUID",
            "example": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "is_authorizer_for": {
            "description": "Companies where the person is an authorizer",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true,
            "type": "array"
          },
          "is_shareholder_for": {
            "deprecated": true,
            "description": "Companies where the person is an ubo",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true,
            "type": "array"
          },
          "last_name": {
            "description": "Person last name",
            "example": "Last",
            "type": "string"
          },
          "locale": {
            "$ref": "#/components/schemas/Locale"
          },
          "middle_name": {
            "description": "Person middle name",
            "example": "Middle",
            "nullable": true,
            "type": "string"
          },
          "national_id_number": {
            "description": "Person national ID",
            "example": "12345678991",
            "nullable": true,
            "type": "string"
          },
          "phone_country_code": {
            "description": "Phone country code (ITU-T E.164)",
            "example": "351",
            "nullable": true,
            "pattern": "^[0-9]{1,5}$",
            "type": "string"
          },
          "phone_number": {
            "description": "Phone number without country code",
            "example": "914003982",
            "nullable": true,
            "pattern": "^[0-9]{4,10}$",
            "type": "string"
          }
        },
        "title": "Person",
        "type": "object"
      },
      "Store": {
        "description": "Store",
        "properties": {
          "active": {
            "description": "Is the Store Active?",
            "example": true,
            "type": "boolean"
          },
          "address": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "Address for a store. Required for PHYSICAL stores.",
            "nullable": true,
            "type": "object"
          },
          "billing_email": {
            "description": "Billing E-mail",
            "example": "store@saltpay.co",
            "format": "email",
            "nullable": true,
            "type": "string"
          },
          "charging_bank_account": {
            "nullable": true,
            "oneOf": [
              {
                "$ref": "#/components/schemas/ChargingBankAccount"
              }
            ],
            "type": "object"
          },
          "company_id": {
            "example": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
            "format": "uuid",
            "nullable": false,
            "type": "string",
            "writeOnly": true
          },
          "country": {
            "description": "Country code (ISO 3166-1 alpha-2)",
            "example": "IS",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "delivery_address": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ],
            "description": "The address to which the assets are to be delivered",
            "nullable": true,
            "type": "object"
          },
          "id": {
            "description": "Store ID",
            "example": "1004f1fc-be52-4405-9d4f-c60f0d8e990a",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "inserted_at": {
            "description": "Datetime of creation (ISO 8601)",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "mcc": {
            "description": "Four-digit number listed in ISO 18245 for retail financial services",
            "example": "0742",
            "nullable": true,
            "type": "string"
          },
          "name": {
            "description": "Store Name",
            "example": "Store Name",
            "minLength": 2,
            "type": "string"
          },
          "phone_country_code": {
            "description": "Phone country code (ITU-T E.164)",
            "example": "351",
            "nullable": true,
            "pattern": "^[0-9]{1,5}$",
            "type": "string"
          },
          "phone_number": {
            "description": "Phone number without country code",
            "example": "914003982",
            "nullable": true,
            "pattern": "^[0-9]{4,10}$",
            "type": "string"
          },
          "short_id": {
            "description": "Store short id. It is composed of a 2-digit country code (ISO 639-1) followed by 7 digits and a checksum digit",
            "example": "IS12345675",
            "nullable": true,
            "readOnly": true,
            "type": "string"
          },
          "store_type": {
            "description": "Supported store type",
            "enum": ["PHYSICAL", "DIGITAL"],
            "example": "PHYSICAL",
            "nullable": true,
            "type": "string"
          },
          "updated_at": {
            "description": "Datetime of last update (ISO 8601)",
            "format": "date-time",
            "readOnly": true,
            "type": "string"
          },
          "url": {
            "description": "URL for the store's website. Required for DIGITAL stores.",
            "example": "https://my-store.com",
            "format": "url",
            "nullable": true,
            "type": "string"
          }
        },
        "title": "Store",
        "type": "object"
      },
      "Locale": {
        "description": "Language code (ISO 639-1) with language tag (BCP 47) to define the user's language, date & time formatting convention, monetary & decimal formatting conventions.",
        "enum": [
          "af-ZA",
          "am-ET",
          "be-BY",
          "bg-BG",
          "ca-ES",
          "cs-CZ",
          "da-DK",
          "de-AT",
          "de-CH",
          "de-DE",
          "el-GR",
          "en-AU",
          "en-CA",
          "en-GB",
          "en-IE",
          "en-NZ",
          "en-US",
          "es-ES",
          "et-EE",
          "eu-ES",
          "fi-FI",
          "fr-BE",
          "fr-CA",
          "fr-CH",
          "fr-FR",
          "he-IL",
          "hi-IN",
          "hr-HR",
          "hu-HU",
          "hy-AM",
          "is-IS",
          "it-CH",
          "it-IT",
          "ja-JP",
          "kk-KZ",
          "ko-KR",
          "lt-LT",
          "nl-BE",
          "nl-NL",
          "no-NO",
          "pl-PL",
          "pt-BR",
          "pt-PT",
          "ro-RO",
          "ru-RU",
          "sk-SK",
          "sl-SI",
          "sr-YU",
          "sv-SE",
          "tr-TR",
          "uk-UA",
          "zh-CN",
          "zh-HK",
          "zh-TW"
        ],
        "nullable": true,
        "title": "Locale",
        "type": "string",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.PeopleSchemas.Locale"
      },
      "Address": {
        "description": "Address",
        "properties": {
          "city": {
            "description": "City",
            "example": "Some City",
            "type": "string"
          },
          "country": {
            "description": "Country code (ISO 3166-1 alpha-2)",
            "example": "IS",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "id": {
            "description": "Address ID",
            "example": "78868a92-553e-470d-9ae5-bc30a6655109",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "state": {
            "description": "State",
            "example": "Some State",
            "nullable": true,
            "type": "string"
          },
          "street_address_line_1": {
            "description": "Street Address Line 1",
            "example": "Street A",
            "type": "string"
          },
          "street_address_line_2": {
            "description": "Street Address Line 2",
            "example": "Building B",
            "nullable": true,
            "type": "string"
          },
          "street_address_line_3": {
            "description": "Street Address Line 3",
            "example": "Some additional data",
            "nullable": true,
            "type": "string"
          },
          "zipcode": {
            "description": "Zipcode",
            "example": "24320000",
            "nullable": true,
            "type": "string"
          }
        },
        "title": "Address",
        "type": "object"
      },
      "ChargingBankAccount": {
        "description": "Bank account to charge the customer",
        "properties": {
          "bank_currency": {
            "description": "Bank account currency code (ISO-4217 alpha-3)",
            "example": "EUR",
            "maxLength": 3,
            "minLength": 3,
            "readOnly": true,
            "type": "string"
          },
          "bank_route": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BankRoute"
              }
            ],
            "description": "Bank routing details for the bank account. It is required if `iban` is not set",
            "type": "object"
          },
          "billing_locale": {
            "description": "Language code (ISO 639-1) with language tag (BCP 47) for invoices and billing-related data",
            "enum": [
              "af-ZA",
              "am-ET",
              "be-BY",
              "bg-BG",
              "ca-ES",
              "cs-CZ",
              "da-DK",
              "de-AT",
              "de-CH",
              "de-DE",
              "el-GR",
              "en-AU",
              "en-CA",
              "en-GB",
              "en-IE",
              "en-NZ",
              "en-US",
              "es-ES",
              "et-EE",
              "eu-ES",
              "fi-FI",
              "fr-BE",
              "fr-CA",
              "fr-CH",
              "fr-FR",
              "he-IL",
              "hi-IN",
              "hr-HR",
              "hu-HU",
              "hy-AM",
              "is-IS",
              "it-CH",
              "it-IT",
              "ja-JP",
              "kk-KZ",
              "ko-KR",
              "lt-LT",
              "nl-BE",
              "nl-NL",
              "no-NO",
              "pl-PL",
              "pt-BR",
              "pt-PT",
              "ro-RO",
              "ru-RU",
              "sk-SK",
              "sl-SI",
              "sr-YU",
              "sv-SE",
              "tr-TR",
              "uk-UA",
              "zh-CN",
              "zh-HK",
              "zh-TW"
            ],
            "example": "en-US",
            "type": "string"
          },
          "iban": {
            "description": "International Bank Account Number (IBAN, ISO 13616). If set, the `bank_route` will be ignored",
            "example": "GB24MODR04007557431620",
            "format": "^[A-Z]{2}[0-9]+$",
            "title": "IBAN",
            "type": "string"
          },
          "id": {
            "description": "Charging bank account ID",
            "example": "0fa1ae62-63a0-47db-a0e4-b277e84388ab",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          }
        },
        "title": "ChargingBankAccount",
        "type": "object"
      },
      "BadRequestParameters": {
        "description": "Bad request parameters",
        "example": {
          "code": "INVALID_PAYLOAD",
          "description": "The payload has validation errors and cannot be processed",
          "errors": {
            "name": ["can't be blank"],
            "phone": ["should be at least %{count} character(s)"]
          }
        },
        "properties": {
          "code": {
            "description": "The specific error code. Follows the format <specific error>",
            "type": "string"
          },
          "description": {
            "description": "Technical description in English",
            "type": "string"
          },
          "errors": {
            "description": "The actual errors, in nested format",
            "type": "object"
          }
        },
        "required": ["code", "description"],
        "title": "BadRequestParameters",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.ErrorSchemas.BadRequestParameters"
      },
      "ListCompaniesResponse": {
        "description": "List of companies response body",
        "properties": {
          "companies": {
            "items": {
              "$ref": "#/components/schemas/Company"
            },
            "type": "array"
          }
        },
        "required": ["companies"],
        "title": "ListCompaniesResponse",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.CompaniesResponses.ListCompaniesResponse"
      },
      "ObjectVersion": {
        "properties": {
          "version": {
            "description": "Sequentially incremented number that holds the current version of the object.",
            "example": 1,
            "type": "integer"
          }
        },
        "title": "ObjectVersion",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.HelpersSchemas.Version"
      },
      "CompanyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Company"
          }
        ],
        "description": "Company response body",
        "title": "CompanyResponse",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.CompaniesResponses.CompanyResponse"
      },
      "CreateCompanyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Company"
          },
          {
            "properties": {
              "charging_bank_account": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChargingBankAccount"
                  }
                ],
                "type": "object"
              },
              "owner_user_id": {
                "description": "The user id for organisation owner",
                "type": "string"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "registered_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "Legal business registered address",
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "Body for creating a company",
        "required": ["registered_name"],
        "title": "CreateCompanyRequest",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.CompaniesRequests.CreateCompanyRequest"
      },
      "RoutingSchemeForPortugal": {
        "description": "NIB Routing Scheme for Portugal",
        "properties": {
          "nib": {
            "description": "Portuguese Bank Account Number (NIB)",
            "example": "000201231234567890154",
            "format": "^[0-9]{21}$",
            "type": "string"
          },
          "scheme": {
            "description": "Routing scheme of choice (ISO 639-1)",
            "example": "PT",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          }
        },
        "required": ["scheme", "nib"],
        "title": "RoutingSchemeForPortugal",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.PT"
      },
      "RoutingSchemeForSlovakia": {
        "description": "Routing Scheme for Slovakia",
        "properties": {
          "account_number": {
            "description": "Account number",
            "example": "8742637541",
            "format": "^[0-9]{10}$",
            "type": "string"
          },
          "account_prefix": {
            "description": "Account prefix (optional)",
            "example": "19",
            "format": "^[0-9]{0,6}$",
            "nullable": true,
            "type": "string"
          },
          "bank_code": {
            "description": "Bank code",
            "example": "1200",
            "format": "^[0-9]{4}$",
            "type": "string"
          },
          "scheme": {
            "description": "Routing scheme of choice (ISO 639-1)",
            "example": "SK",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          }
        },
        "required": ["scheme", "bank_code", "account_number"],
        "title": "RoutingSchemeForSlovakia",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.SK"
      },
      "RoutingSchemeForGreatBritain": {
        "description": "Routing Scheme for Great Britain",
        "properties": {
          "account_number": {
            "description": "Account number",
            "example": "57431620",
            "format": "^[0-9]{8}$",
            "type": "string"
          },
          "bank_identifier": {
            "description": "The first four (4) letters from BIC/SWIFT code",
            "example": "MODR",
            "format": "^[A-Z]{4}$",
            "type": "string"
          },
          "scheme": {
            "description": "Routing scheme of choice (ISO 639-1)",
            "example": "GB",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "sort_code": {
            "description": "Sort code",
            "example": "040075",
            "format": "^[0-9]{6}$",
            "type": "string"
          }
        },
        "required": [
          "scheme",
          "account_number",
          "sort_code",
          "bank_identifier"
        ],
        "title": "RoutingSchemeForGreatBritain",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.GB"
      },
      "IBAN": {
        "description": "International Bank Account Number (IBAN, ISO 13616). If set, the `bank_route` will be ignored",
        "example": "GB24MODR04007557431620",
        "format": "^[A-Z]{2}[0-9]+$",
        "title": "IBAN",
        "type": "string"
      },
      "BadGateway": {
        "description": "Server error response code that indicates that the server, while acting as a gateway or proxy, received an invalid response from the upstream server",
        "example": {
          "code": "PARTNER_UNEXPECTED_RESPONSE",
          "description": "A third-party API has returned an invalid response"
        },
        "properties": {
          "code": {
            "description": "The specific error code. Follows the format <specific error>",
            "type": "string"
          },
          "description": {
            "description": "Technical description in English",
            "type": "string"
          },
          "errors": {
            "description": "The actual errors, in nested format",
            "type": "object"
          }
        },
        "required": ["code", "description"],
        "title": "BadGateway",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.ErrorSchemas.BadGateway"
      },
      "Version": {
        "description": "Version",
        "properties": {
          "change_made_by": {
            "description": "Unique identifier of the requester. This is an old field for backward compatibility, it will return either an ID or an Email",
            "nullable": true,
            "type": "string"
          },
          "change_made_by_service_account": {
            "description": "Unique identifier of the service account from the requester. Only required if no change_made_by_user_account is provided.",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "change_made_by_user_account": {
            "description": "Unique identifier of the user account from the requester. Only required if no change_made_by_service_account is provided.",
            "nullable": true,
            "type": "string"
          },
          "changed_on": {
            "description": "Datetime of change (ISO 8601)",
            "format": "date-time",
            "type": "string"
          },
          "changes": {
            "description": "Dynamic: Map of all fields that changed in the object, with their respective new values",
            "type": "object"
          },
          "event": {
            "description": "Type of change",
            "enum": ["INSERT", "UPDATE", "DELETE"],
            "type": "string"
          },
          "id": {
            "description": "Version ID",
            "readOnly": true,
            "type": "integer"
          },
          "record_id": {
            "description": "ID of changed object",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": ["record_id", "event", "changed_on", "changes"],
        "title": "Version",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.VersionsSchemas.Version"
      },
      "UpdatePersonRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          },
          {
            "$ref": "#/components/schemas/ObjectVersion"
          }
        ],
        "description": "Body for updating a person",
        "example": {
          "middle_name": "Updated Name",
          "version": 1
        },
        "title": "UpdatePersonRequest",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.PeopleRequests.UpdatePersonRequest"
      },
      "UploadDocumentRequest": {
        "description": "Body for upload document",
        "properties": {
          "company_id": {
            "description": "Company UUID. Is mutually excluse with `person_id`.",
            "example": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
            "format": "uuid",
            "type": "string"
          },
          "file_base64": {
            "description": "File Base 64 encoded. Same as `image_base64`.",
            "example": "QUJD",
            "type": "string"
          },
          "image_base64": {
            "deprecated": true,
            "description": "Image Base 64 encoded",
            "example": "QUJD",
            "type": "string"
          },
          "person_id": {
            "description": "Person UUID. Is mutually excluse with `company_id`.",
            "example": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
            "format": "uuid",
            "type": "string"
          },
          "type": {
            "description": "Document type. If `company_id` is set, only `PROOF_OF_OFFICE_REGISTERED` is allowed.",
            "enum": [
              "ID_FRONT",
              "ID_BACK",
              "PASSPORT_FRONT",
              "DRIVER_LICENSE_FRONT",
              "DRIVER_LICENSE_BACK",
              "PROOF_OF_ADDRESS",
              "PROOF_OF_OFFICE_REGISTERED"
            ],
            "example": "DRIVER_LICENSE_BACK",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "UploadDocumentRequest",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.DocumentsRequests.UploadDocumentRequest"
      },
      "ListStoresResponse": {
        "description": "List of stores response body",
        "properties": {
          "stores": {
            "description": "List of Stores",
            "items": {
              "$ref": "#/components/schemas/Store"
            },
            "type": "array"
          }
        },
        "required": ["stores"],
        "title": "ListStoresResponse",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.StoresResponses.ListStoresResponse"
      },
      "RoutingSchemeForHungary": {
        "description": "Routing Scheme for Hungary",
        "properties": {
          "account_number": {
            "description": "Account number",
            "example": "117730161111101800000000",
            "format": "^[0-9]{24}$",
            "type": "string"
          },
          "scheme": {
            "description": "Routing scheme of choice (ISO 639-1)",
            "example": "HU",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          }
        },
        "required": ["scheme", "account_number"],
        "title": "RoutingSchemeForHungary",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.HU"
      },
      "UpdateStoreRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Store"
          },
          {
            "$ref": "#/components/schemas/ObjectVersion"
          }
        ],
        "description": "Body for updating a store",
        "example": {
          "name": "Updated Name",
          "version": 1
        },
        "title": "UpdateStoreRequest",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.StoresRequests.UpdateStoreRequest"
      },
      "CreateStoreRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Store"
          },
          {
            "nullable": true,
            "properties": {
              "charging_bank_account": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChargingBankAccount"
                  }
                ],
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "delivery_address": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Address"
                  }
                ],
                "description": "The address to which the assets are to be delivered",
                "type": "object"
              }
            },
            "type": "object"
          }
        ],
        "description": "Body for creating a store",
        "required": ["name", "company_id"],
        "title": "CreateStoreRequest",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.StoresRequests.CreateStoreRequest"
      },
      "SearchPersonResponse": {
        "additionalProperties": false,
        "description": "Search Person Response",
        "properties": {
          "people": {
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "type": "array"
          }
        },
        "required": ["people"],
        "title": "SearchPersonResponse",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.PeopleResponses.SearchPersonResponse"
      },
      "DocumentResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Document"
          }
        ],
        "description": "Document Response",
        "title": "DocumentResponse",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.DocumentsResponses.DocumentResponse"
      },
      "ListVersionsResponse": {
        "additionalProperties": false,
        "description": "Versions Response",
        "example": {
          "versions": [
            {
              "change_made_by_service_account": "13b5b1d4-8497-410c-a916-82915e159aee",
              "change_made_by_user_account": "user-saltid/13b5b1d4-8497-410c-a916-82915e159aee",
              "changed_on": "2021-04-22T14:49:29Z",
              "changes": {
                "authorizer_id": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
                "id": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
                "legal_structure": "LIMITED",
                "registered_name": "Company Name",
                "registered_number": "123456789",
                "updated_at": "2021-04-22T14:49:29"
              },
              "event": "INSERT",
              "id": 5,
              "record_id": "e4626fa3-6810-4d21-ba3c-f2c5ad0d1d61"
            }
          ]
        },
        "properties": {
          "versions": {
            "description": "Versions",
            "items": {
              "$ref": "#/components/schemas/Version"
            },
            "type": "array"
          }
        },
        "required": ["versions"],
        "title": "ListVersionsResponse",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.VersionsResponses.ListVersionsResponse"
      },
      "Conflict": {
        "description": "Resource conflict",
        "example": {
          "code": "IDEMPOTENCY_KEY_CONFLICT",
          "description": "The provided idempotency key already exists for another resouce"
        },
        "properties": {
          "code": {
            "description": "The specific error code. Follows the format <specific error>",
            "type": "string"
          },
          "description": {
            "description": "Technical description in English",
            "type": "string"
          }
        },
        "required": ["code", "description"],
        "title": "Conflict",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.ErrorSchemas.Conflict"
      },
      "RoutingSchemeForIceland": {
        "description": "Routing Scheme for Iceland",
        "properties": {
          "account_number": {
            "description": "Account number",
            "example": "007654",
            "format": "^[0-9]{6}$",
            "type": "string"
          },
          "account_type": {
            "description": "Account type",
            "example": "26",
            "format": "^[0-9]{2}$",
            "type": "string"
          },
          "bank_code": {
            "description": "Bank code",
            "example": "0159",
            "format": "^[0-9]{4}$",
            "type": "string"
          },
          "kennitala": {
            "description": "Kennitala",
            "example": "5510730339",
            "format": "^[0-9]{10}$",
            "type": "string"
          },
          "scheme": {
            "description": "Routing scheme of choice (ISO 639-1)",
            "example": "IS",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          }
        },
        "required": [
          "scheme",
          "bank_code",
          "account_number",
          "account_type",
          "kennitala"
        ],
        "title": "RoutingSchemeForIceland",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.IS"
      },
      "BankRoute": {
        "anyOf": [
          {
            "description": "Routing Scheme for Czech Republic",
            "properties": {
              "account_number": {
                "description": "Account number",
                "example": "2000145399",
                "format": "^[0-9]{10}$",
                "type": "string"
              },
              "account_prefix": {
                "description": "Account prefix",
                "example": "19",
                "format": "^[0-9]{0,6}$",
                "nullable": true,
                "type": "string"
              },
              "bank_code": {
                "description": "Bank code",
                "example": "0800",
                "format": "^[0-9]{4}$",
                "type": "string"
              },
              "scheme": {
                "description": "Routing scheme of choice (ISO 639-1)",
                "example": "CZ",
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              }
            },
            "required": ["scheme", "bank_code", "account_number"],
            "title": "RoutingSchemeForCzechRepublic",
            "type": "object",
            "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.CZ"
          },
          {
            "description": "Routing Scheme for Great Britain",
            "properties": {
              "account_number": {
                "description": "Account number",
                "example": "57431620",
                "format": "^[0-9]{8}$",
                "type": "string"
              },
              "bank_identifier": {
                "description": "The first four (4) letters from BIC/SWIFT code",
                "example": "MODR",
                "format": "^[A-Z]{4}$",
                "type": "string"
              },
              "scheme": {
                "description": "Routing scheme of choice (ISO 639-1)",
                "example": "GB",
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              },
              "sort_code": {
                "description": "Sort code",
                "example": "040075",
                "format": "^[0-9]{6}$",
                "type": "string"
              }
            },
            "required": [
              "scheme",
              "account_number",
              "sort_code",
              "bank_identifier"
            ],
            "title": "RoutingSchemeForGreatBritain",
            "type": "object",
            "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.GB"
          },
          {
            "description": "Routing Scheme for Croatia",
            "properties": {
              "account_number": {
                "description": "Account number",
                "example": "1863000160",
                "format": "^[0-9]{10}$",
                "type": "string"
              },
              "bank_code": {
                "description": "Bank code",
                "example": "1001005",
                "format": "^[0-9]{7}$",
                "type": "string"
              },
              "scheme": {
                "description": "Routing scheme of choice (ISO 639-1)",
                "example": "HR",
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              }
            },
            "required": ["scheme", "bank_code", "account_number"],
            "title": "RoutingSchemeForCroatia",
            "type": "object",
            "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.HR"
          },
          {
            "description": "Routing Scheme for Hungary",
            "properties": {
              "account_number": {
                "description": "Account number",
                "example": "117730161111101800000000",
                "format": "^[0-9]{24}$",
                "type": "string"
              },
              "scheme": {
                "description": "Routing scheme of choice (ISO 639-1)",
                "example": "HU",
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              }
            },
            "required": ["scheme", "account_number"],
            "title": "RoutingSchemeForHungary",
            "type": "object",
            "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.HU"
          },
          {
            "description": "Routing Scheme for Iceland",
            "properties": {
              "account_number": {
                "description": "Account number",
                "example": "007654",
                "format": "^[0-9]{6}$",
                "type": "string"
              },
              "account_type": {
                "description": "Account type",
                "example": "26",
                "format": "^[0-9]{2}$",
                "type": "string"
              },
              "bank_code": {
                "description": "Bank code",
                "example": "0159",
                "format": "^[0-9]{4}$",
                "type": "string"
              },
              "kennitala": {
                "description": "Kennitala",
                "example": "5510730339",
                "format": "^[0-9]{10}$",
                "type": "string"
              },
              "scheme": {
                "description": "Routing scheme of choice (ISO 639-1)",
                "example": "IS",
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              }
            },
            "required": [
              "scheme",
              "bank_code",
              "account_number",
              "account_type",
              "kennitala"
            ],
            "title": "RoutingSchemeForIceland",
            "type": "object",
            "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.IS"
          },
          {
            "description": "NIB Routing Scheme for Portugal",
            "properties": {
              "nib": {
                "description": "Portuguese Bank Account Number (NIB)",
                "example": "000201231234567890154",
                "format": "^[0-9]{21}$",
                "type": "string"
              },
              "scheme": {
                "description": "Routing scheme of choice (ISO 639-1)",
                "example": "PT",
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              }
            },
            "required": ["scheme", "nib"],
            "title": "RoutingSchemeForPortugal",
            "type": "object",
            "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.PT"
          },
          {
            "description": "Routing Scheme for Slovakia",
            "properties": {
              "account_number": {
                "description": "Account number",
                "example": "8742637541",
                "format": "^[0-9]{10}$",
                "type": "string"
              },
              "account_prefix": {
                "description": "Account prefix (optional)",
                "example": "19",
                "format": "^[0-9]{0,6}$",
                "nullable": true,
                "type": "string"
              },
              "bank_code": {
                "description": "Bank code",
                "example": "1200",
                "format": "^[0-9]{4}$",
                "type": "string"
              },
              "scheme": {
                "description": "Routing scheme of choice (ISO 639-1)",
                "example": "SK",
                "maxLength": 2,
                "minLength": 2,
                "type": "string"
              }
            },
            "required": ["scheme", "bank_code", "account_number"],
            "title": "RoutingSchemeForSlovakia",
            "type": "object",
            "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.SK"
          }
        ],
        "description": "Bank Route",
        "discriminator": {
          "mapping": {
            "CZ": "#/components/schemas/RoutingSchemeForCzechRepublic",
            "GB": "#/components/schemas/RoutingSchemeForGreatBritain",
            "HR": "#/components/schemas/RoutingSchemeForCroatia",
            "HU": "#/components/schemas/RoutingSchemeForHungary",
            "IS": "#/components/schemas/RoutingSchemeForIceland",
            "PT": "#/components/schemas/RoutingSchemeForPortugal",
            "SK": "#/components/schemas/RoutingSchemeForSlovakia"
          },
          "propertyName": "scheme"
        },
        "required": ["scheme"],
        "title": "BankRoute",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.BankRoute"
      },
      "StoreResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Store"
          },
          {
            "nullable": true,
            "properties": {
              "charging_bank_account": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ChargingBankAccount"
                  }
                ],
                "nullable": true,
                "type": "object"
              }
            },
            "type": "object"
          },
          {
            "properties": {
              "company": {
                "$ref": "#/components/schemas/Company"
              }
            },
            "required": ["company"],
            "type": "object"
          }
        ],
        "description": "Store response body",
        "title": "StoreResponse",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.StoresResponses.StoreResponse"
      },
      "Document": {
        "description": "Document",
        "properties": {
          "company_id": {
            "description": "Company UUID",
            "example": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "id": {
            "description": "Document UUID",
            "example": "78868a92-553e-470d-9ae5-bc30a6655109",
            "format": "uuid",
            "readOnly": true,
            "type": "string"
          },
          "path": {
            "description": "Filepath on s3",
            "example": "https://url.com/to/document",
            "format": "url",
            "type": "string"
          },
          "person_id": {
            "description": "Person UUID",
            "example": "ffe1cd43-1f43-47f5-afa7-438d5baef783",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "type": {
            "description": "Type of the document",
            "enum": [
              "PASSPORT_FRONT",
              "ID_FRONT",
              "ID_BACK",
              "DRIVER_LICENSE_FRONT",
              "DRIVER_LICENSE_BACK",
              "PROOF_OF_ADDRESS",
              "PROOF_OF_OFFICE_REGISTERED"
            ],
            "example": "DRIVER_LICENSE_FRONT",
            "type": "string"
          }
        },
        "required": ["path", "type"],
        "title": "Document",
        "type": "object"
      },
      "RoutingSchemeForCzechRepublic": {
        "description": "Routing Scheme for Czech Republic",
        "properties": {
          "account_number": {
            "description": "Account number",
            "example": "2000145399",
            "format": "^[0-9]{10}$",
            "type": "string"
          },
          "account_prefix": {
            "description": "Account prefix",
            "example": "19",
            "format": "^[0-9]{0,6}$",
            "nullable": true,
            "type": "string"
          },
          "bank_code": {
            "description": "Bank code",
            "example": "0800",
            "format": "^[0-9]{4}$",
            "type": "string"
          },
          "scheme": {
            "description": "Routing scheme of choice (ISO 639-1)",
            "example": "CZ",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          }
        },
        "required": ["scheme", "bank_code", "account_number"],
        "title": "RoutingSchemeForCzechRepublic",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.CZ"
      },
      "UpdateCompanyRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Company"
          },
          {
            "$ref": "#/components/schemas/ObjectVersion"
          },
          {
            "properties": {
              "shareholders": {
                "deprecated": true,
                "items": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/PersonRole"
                    },
                    {
                      "properties": {
                        "deleted": {
                          "default": false,
                          "description": "If true, removes this shareholder from the company. Bear in mind that the person is not deleted.",
                          "type": "boolean"
                        }
                      },
                      "type": "object"
                    }
                  ]
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ],
        "description": "Body for updating company",
        "example": {
          "registered_name": "Updated Registry Name",
          "version": 1
        },
        "title": "UpdateCompanyRequest",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.CompaniesRequests.UpdateCompanyRequest"
      },
      "RoutingSchemeForCroatia": {
        "description": "Routing Scheme for Croatia",
        "properties": {
          "account_number": {
            "description": "Account number",
            "example": "1863000160",
            "format": "^[0-9]{10}$",
            "type": "string"
          },
          "bank_code": {
            "description": "Bank code",
            "example": "1001005",
            "format": "^[0-9]{7}$",
            "type": "string"
          },
          "scheme": {
            "description": "Routing scheme of choice (ISO 639-1)",
            "example": "HR",
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          }
        },
        "required": ["scheme", "bank_code", "account_number"],
        "title": "RoutingSchemeForCroatia",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.BankRoutesSchemas.HR"
      },
      "CreatePersonRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Person"
          }
        ],
        "description": "Body for creating a person",
        "required": ["first_name", "last_name"],
        "title": "CreatePersonRequest",
        "type": "object",
        "x-struct": "Elixir.MdmWeb.OpenApi.KYC.PeopleRequests.CreatePersonRequest"
      },
      "PersonRole": {
        "description": "PersonRole",
        "properties": {
          "id": {
            "description": "PersonRole UUID. When used in the update operation, it will update the person role with the given id.",
            "example": "5536420e-194b-40e7-8eba-4607fcd5a997",
            "format": "uuid",
            "type": "string"
          },
          "person": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Person"
              }
            ],
            "description": "Person information. Only required if no person_id is provided. This will create a new person."
          },
          "person_id": {
            "description": "Person UUID. If set, the person with the given id will be used. If not set, a new person will be created from the data provided",
            "format": "uuid",
            "type": "string"
          },
          "roles": {
            "description": "The role of the person in a company. Default to `UBO` on creation if none is set.",
            "example": ["UBO"],
            "items": {
              "enum": ["UBO", "DIRECTOR"],
              "type": "string"
            },
            "type": "array"
          },
          "share": {
            "description": "Decimal as string. Only required when roles has `UBO`",
            "example": "0.24",
            "format": "^((1\\.0)|(0\\.0*[1-9][0-9]*?))$",
            "nullable": true,
            "type": "string"
          }
        },
        "title": "PersonRole",
        "type": "object"
      }
    },
    "securitySchemes": {
      "Authorization": {
        "description": "SALTPAY-API-TOKEN **token**",
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "contact": {
      "email": "global-merchant-database@saltpay.co",
      "name": "#global-merchant-database-integrations @ Slack",
      "url": "https://docs.cloud.saltpay.co/"
    },
    "description": "Entry point for Company & Store management. Exposes endpoints to create, update, search, view history (and more) for all of entities.",
    "title": "Merchant Data API",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/v1/companies": {
      "get": {
        "callbacks": {},
        "description": "Search for companies.\n\nPassing an `authorizer_id` will filter to companies whose Authorizer match the received ID.\nPassing a query `q` will filter by:\n- Registry Business Name\n- Registry Business Number\n- Company ID",
        "operationId": "MdmWeb.Api.V1.CompaniesController.search_companies",
        "parameters": [
          {
            "description": "Search query",
            "example": "Marias Muffin",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "deprecated": true,
            "description": "Authorizer User ID",
            "example": "63aa684f-c53f-48e3-8147-c08aed9eb4e6",
            "in": "query",
            "name": "authorizer_user_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Authorizer ID",
            "example": "a6e6b489-8e06-4b16-be97-703123eba82f",
            "in": "query",
            "name": "authorizer_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Country code (ISO 3166-1 alpha-2)",
            "example": "PT",
            "in": "query",
            "name": "country",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of entries to return, up to a limit of 50.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The (zero-based) offset of the first record in the collection to return",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Filter by entities with `updated_at` greater than this value",
            "in": "query",
            "name": "updated_at__gt",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCompaniesResponse"
                }
              }
            },
            "description": "SearchResult"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Search & List Companies",
        "tags": ["Companies"]
      },
      "post": {
        "callbacks": {},
        "description": "Registers a company in SaltPay.",
        "operationId": "MdmWeb.Api.V1.CompaniesController.create_company",
        "parameters": [
          {
            "description": "A randomly-generated key that, when provided, ensures the idempotency of the request. Useful to avoid duplication during retries.",
            "example": "e0f11fdb-35ff-4972-b545-009bf9f79645",
            "in": "header",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyRequest"
              }
            }
          },
          "description": "CreateCompanyRequest",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponse"
                }
              }
            },
            "description": "Company"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestParameters"
                }
              }
            },
            "description": "BadRequestParameters"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conflict"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Register Company",
        "tags": ["Companies"]
      }
    },
    "/v1/companies/{company_id}": {
      "get": {
        "callbacks": {},
        "description": "Shows a given company's KYC information.",
        "operationId": "MdmWeb.Api.V1.CompaniesController.show_company",
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "company_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponse"
                }
              }
            },
            "description": "CompanyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestParameters"
                }
              }
            },
            "description": "BadRequestParameters"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Show Company",
        "tags": ["Companies"]
      },
      "patch": {
        "callbacks": {},
        "description": "Updates a given company's KYC information.",
        "operationId": "MdmWeb.Api.V1.CompaniesController.update_company",
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "company_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyRequest"
              }
            }
          },
          "description": "UpdateCompanyRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponse"
                }
              }
            },
            "description": "CompanyResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestParameters"
                }
              }
            },
            "description": "BadRequestParameters"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Update Company",
        "tags": ["Companies"]
      }
    },
    "/v1/companies/{company_id}/history": {
      "get": {
        "callbacks": {},
        "description": "Retrieves all modifications done to a company.",
        "operationId": "MdmWeb.Api.V1.CompaniesController.get_company_history",
        "parameters": [
          {
            "description": "Company ID",
            "in": "path",
            "name": "company_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of entries to return, up to a limit of 50.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The (zero-based) offset of the first record in the collection to return",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVersionsResponse"
                }
              }
            },
            "description": "HistoricalCompanyData"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Show Company History",
        "tags": ["Companies"]
      }
    },
    "/v1/documents": {
      "post": {
        "callbacks": {},
        "description": "Upload Document",
        "operationId": "MdmWeb.Api.V1.DocumentsController.upload_document",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UploadDocumentRequest"
              }
            }
          },
          "description": "UploadDocumentRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentResponse"
                }
              }
            },
            "description": "DocumentResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestParameters"
                }
              }
            },
            "description": "BadRequestParameters"
          }
        },
        "summary": "Upload Document",
        "tags": ["Documents"]
      }
    },
    "/v1/people": {
      "get": {
        "callbacks": {},
        "description": "Search for people with email and if the person is an authorizer or if is a shareholder",
        "operationId": "MdmWeb.Api.V1.PeopleController.search_person",
        "parameters": [
          {
            "description": "Is the person an authorizer",
            "in": "query",
            "name": "is_authorizer",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "deprecated": true,
            "description": "(depecrated) Is the person a shareholder. Please use `is_ubo` instead",
            "in": "query",
            "name": "is_shareholder",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Is the person an ubo",
            "in": "query",
            "name": "is_ubo",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "Email id of the person",
            "in": "query",
            "name": "email",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Phone number of the person (including phone country code) without the plus sign",
            "in": "query",
            "name": "phone_number",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchPersonResponse"
                }
              }
            },
            "description": "PersonResponse"
          }
        },
        "summary": "Search and List people",
        "tags": ["People"]
      },
      "post": {
        "callbacks": {},
        "description": "Registers a Person",
        "operationId": "MdmWeb.Api.V1.PeopleController.create_person",
        "parameters": [
          {
            "description": "A randomly-generated key that, when provided, ensures the idempotency of the request. Useful to avoid duplication during retries.",
            "example": "e0f11fdb-35ff-4972-b545-009bf9f79645",
            "in": "header",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonRequest"
              }
            }
          },
          "description": "CreatePersonRequest",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            },
            "description": "Person"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestParameters"
                }
              }
            },
            "description": "BadRequestParameters"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conflict"
                }
              }
            },
            "description": "Conflict"
          },
          "502": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadGateway"
                }
              }
            },
            "description": "BadGateway"
          }
        },
        "summary": "Register Person",
        "tags": ["People"]
      }
    },
    "/v1/people/me": {
      "get": {
        "callbacks": {},
        "description": "Show current person based on the account connected",
        "operationId": "MdmWeb.Api.V1.PeopleController.show_current_person",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            },
            "description": "PersonResponse"
          }
        },
        "summary": "Show Current Person",
        "tags": ["People"]
      }
    },
    "/v1/people/{person_id}": {
      "delete": {
        "callbacks": {},
        "description": "Deletes a Person",
        "operationId": "MdmWeb.Api.V1.PeopleController.remove_person",
        "parameters": [
          {
            "description": "Person ID",
            "in": "path",
            "name": "person_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            },
            "description": "Person"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "summary": "Delete Person",
        "tags": ["People"]
      },
      "get": {
        "callbacks": {},
        "description": "Show Person by given ID",
        "operationId": "MdmWeb.Api.V1.PeopleController.show_person",
        "parameters": [
          {
            "description": "Person ID",
            "in": "path",
            "name": "person_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            },
            "description": "PersonResponse"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "summary": "Show Person",
        "tags": ["People"]
      },
      "patch": {
        "callbacks": {},
        "description": "Update an Person",
        "operationId": "MdmWeb.Api.V1.PeopleController.update_person",
        "parameters": [
          {
            "description": "Person ID",
            "in": "path",
            "name": "person_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePersonRequest"
              }
            }
          },
          "description": "UpdatePersonRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonResponse"
                }
              }
            },
            "description": "Person"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestParameters"
                }
              }
            },
            "description": "BadRequestParameters"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "summary": "Update Person",
        "tags": ["People"]
      }
    },
    "/v1/people/{person_id}/history": {
      "get": {
        "callbacks": {},
        "description": "Retrieves all modifications done to a person.",
        "operationId": "MdmWeb.Api.V1.PeopleController.get_person_history",
        "parameters": [
          {
            "description": "Person ID",
            "in": "path",
            "name": "person_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of entries to return, up to a limit of 50.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The (zero-based) offset of the first record in the collection to return",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVersionsResponse"
                }
              }
            },
            "description": "HistoricalPersonData"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "summary": "Show Person History",
        "tags": ["People"]
      }
    },
    "/v1/stores": {
      "get": {
        "callbacks": {},
        "description": "Lists stores, filtered by the company_id or search query, if present.\n\nPassing a query will filter by:\n- `Store DBA name`\n- `Store ID`\n- `Store Short ID`\n- `Company Registry Name`\n- `Company Registry Number`",
        "operationId": "MdmWeb.Api.V1.StoresController.search_stores",
        "parameters": [
          {
            "description": "Search query",
            "example": "Marias Muffin",
            "in": "query",
            "name": "q",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Company ID",
            "example": "c1862c76-e79b-4ede-ba12-d1e4d9ea16d9",
            "in": "query",
            "name": "company_id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of entries to return, up to a limit of 50.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The (zero-based) offset of the first record in the collection to return",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "Filter by entities with `updated_at` greater than this value",
            "in": "query",
            "name": "updated_at__gt",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListStoresResponse"
                }
              }
            },
            "description": "Search for stores"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Search & List Stores",
        "tags": ["Stores"]
      },
      "post": {
        "callbacks": {},
        "description": "Registers a store in SaltPay.",
        "operationId": "MdmWeb.Api.V1.StoresController.create_store",
        "parameters": [
          {
            "description": "A randomly-generated key that, when provided, ensures the idempotency of the request. Useful to avoid duplication during retries.",
            "example": "e0f11fdb-35ff-4972-b545-009bf9f79645",
            "in": "header",
            "name": "idempotency_key",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStoreRequest"
              }
            }
          },
          "description": "CreateStoreRequest",
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreResponse"
                }
              }
            },
            "description": "StoreResponse"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestParameters"
                }
              }
            },
            "description": "BadRequestParameters"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Conflict"
                }
              }
            },
            "description": "Conflict"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Register Store",
        "tags": ["Stores"]
      }
    },
    "/v1/stores/{store_id}": {
      "get": {
        "callbacks": {},
        "description": "Shows a given store's KYC information.",
        "operationId": "MdmWeb.Api.V1.StoresController.show_store",
        "parameters": [
          {
            "description": "Store id or store short id",
            "in": "path",
            "name": "store_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreResponse"
                }
              }
            },
            "description": "Store"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Show Store",
        "tags": ["Stores"]
      },
      "patch": {
        "callbacks": {},
        "description": "Updates a given store's KYC information.",
        "operationId": "MdmWeb.Api.V1.StoresController.update_store",
        "parameters": [
          {
            "description": "Store id or store short id",
            "in": "path",
            "name": "store_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStoreRequest"
              }
            }
          },
          "description": "StoreRequest",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoreResponse"
                }
              }
            },
            "description": "Store"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestParameters"
                }
              }
            },
            "description": "BadRequestParameters"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Update Store",
        "tags": ["Stores"]
      }
    },
    "/v1/stores/{store_id}/history": {
      "get": {
        "callbacks": {},
        "description": "Retrieves all modifications done to a store.",
        "operationId": "MdmWeb.Api.V1.StoresController.get_store_history",
        "parameters": [
          {
            "description": "Store ID or store short id",
            "in": "path",
            "name": "store_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The maximum number of entries to return, up to a limit of 50.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "description": "The (zero-based) offset of the first record in the collection to return",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVersionsResponse"
                }
              }
            },
            "description": "HistoricalStoreData"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFound"
                }
              }
            },
            "description": "NotFound"
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ],
        "summary": "Show Store History",
        "tags": ["Stores"]
      }
    }
  },
  "security": [
    {
      "Authorization": []
    }
  ],
  "servers": [
    {
      "description": "Development API",
      "url": "https://api.cloud.saltpay.dev",
      "variables": {}
    },
    {
      "description": "Local API",
      "url": "http://localhost:4000/api",
      "variables": {}
    },
    {
      "description": "Production API",
      "url": "https://api.cloud.saltpay.co",
      "variables": {}
    }
  ],
  "tags": [
    {
      "description": "API for company management. Create, update, and delete companies",
      "name": "Companies"
    },
    {
      "description": "API for store management. Create, update, and delete stores",
      "name": "Stores"
    },
    {
      "description": "API for person management. Create, update, and delete people",
      "name": "People"
    },
    {
      "description": "API for document management. Create and update documents",
      "name": "Documents"
    }
  ]
}
